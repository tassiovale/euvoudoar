generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  email String
  name  String?
  role String @default("USER")

  institutionsCreated Institution[] @relation("createdBy")
  institutionsUpdated Institution[] @relation("updatedBy")
  institutionsDeleted Institution[] @relation("deletedBy")
  donateCreated Donate[] @relation("createdBy")
  donateUpdated Donate[] @relation("updatedBy")
  donateDeleted Donate[] @relation("deletedBy")
  donor Donate[] @relation("donorId")
}

model Institution {
  id  String  @id @default(uuid())
  name String
  cnpj String @unique
  paymentGateway PaymentGateway?
  description String
  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?

  createdBy User @relation(name:"createdBy", fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  creatorId String

  updatedBy User? @relation(name:"updatedBy",fields: [updaterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updaterId String?

  deletedBy User? @relation(name:"deletedBy",fields: [deleterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  deleterId String?

  Donate Donate[]
}

model Image {
  id Int @id @default(autoincrement())
  url String
  institution Institution @relation(fields: [institutionId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  institutionId String 
}

model PaymentGateway {
  type String
  apiKey String @id @unique
  institution Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  institutionId String @unique
}

enum Status {
  PENDING
  CANCELED
  PAID
}

model Donate {
  id                       String     @id @default(uuid())
  
  institution Institution @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  institutionId            String
  
  donor User @relation(name: "donorId", fields: [donorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  donorId                  String

  recurrence               String?
  recurrenceExpirationDate DateTime?
  value                    Float
  status                   Status @default(PENDING)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @default(now())
  deletedAt                DateTime?

  creatorId User @relation(name: "createdBy", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy                String

  updaterId User? @relation(name: "updatedBy", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedBy                String

  deleterId User?   @relation(name: "deletedBy", fields: [deletedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  deletedBy                String?
}
